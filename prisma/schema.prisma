// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../lib/validations/generated"
  createRelationValuesTypes        = true
  createInputTypes                 = false
  createModelTypes                 = true
  addInputTypeValidation           = false
  addIncludeType                   = false
  addSelectType                    = false
  validateWhereUniqueInput         = false
  createOptionalDefaultValuesTypes = true
  createPartialTypes               = true
  useMultipleFiles                 = false
  writeBarrelFiles                 = false
  prismaClientPath                 = "@prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ユーザープロフィール（auth.usersとの1対1関連 - 中心となるモデル）
// auth.usersのidを外部参照として管理
model UserProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique @db.Uuid // auth.usersのidと紐付け（UUID型）
  username            String?  @unique // ユーザー名（任意）
  full_name           String?
  avatar_url          String?
  questionCount       Int      @default(0) @db.Integer
  recommendationCount Int      @default(0) @db.Integer
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // リレーション
  questionnaireSessions QuestionnaireSession[]
  userHistories         UserHistory[]

  @@index([userId])
  @@index([created_at])
  @@index([username])
  @@map("user_profiles")
}

// カテゴリ（階層構造対応）
model Category {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  description String?  @db.Text
  parentId    String? // 親カテゴリのID
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // 自己参照リレーション
  parentCategory Category?  @relation("CategorySubCategory", fields: [parentId], references: [id])
  subCategories  Category[] @relation("CategorySubCategory")

  // リレーション
  productCategories    ProductCategory[]
  questions            Question[]
  keyPoints            CategoryKeyPoint[]
  commonQuestions      CategoryCommonQuestion[]
  userHistories        UserHistory[]
  QuestionnaireSession QuestionnaireSession[]

  @@index([parentId])
  @@index([name])
  @@index([created_at])
  @@map("categories")
}

// カテゴリキーポイント
model CategoryKeyPoint {
  id         String   @id @default(cuid())
  categoryId String
  point      String // キーポイントの内容
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // リレーション
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("category_key_points")
}

// カテゴリ一般的な質問
model CategoryCommonQuestion {
  id         String   @id @default(cuid())
  categoryId String
  question   String // 一般的な質問の内容
  answer     String? // 質問に対する回答（任意）
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // リレーション
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("category_common_questions")
}

// 製品
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal? @db.Decimal(10, 2)
  rating      Decimal? @db.Decimal(3, 2) // 5.00まで
  features    String // 製品の特徴
  rakuten_url String?
  image_url   String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // リレーション
  productCategories ProductCategory[]
  productTags       ProductTag[]
  recommendations   Recommendation[]

  @@map("products")
}

// 製品とカテゴリの中間テーブル（多対多）
model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@map("product_categories")
}

// タグ（マスターテーブル）
model Tag {
  id          String   @id @default(cuid())
  name        String   @unique // タグ名
  description String? // タグの説明
  color       String? // 表示色
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // リレーション
  productTags ProductTag[]

  @@map("tags")
}

// 製品とタグの中間テーブル（多対多）
model ProductTag {
  id         String   @id @default(cuid())
  productId  String
  tagId      String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // リレーション
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@map("product_tags")
}

// 質問
model Question {
  id          String       @id @default(cuid())
  categoryId  String
  text        String
  description String?
  type        QuestionType // 質問タイプ
  is_required Boolean      @default(true)
  created_at  DateTime     @default(now()) @db.Timestamptz(6)
  updated_at  DateTime     @default(now()) @updatedAt @db.Timestamptz(6)

  // リレーション
  category Category         @relation(fields: [categoryId], references: [id])
  options  QuestionOption[]
  answers  Answer[]

  @@map("questions")
}

// 質問オプション
model QuestionOption {
  id          String   @id @default(cuid())
  questionId  String
  label       String // ユーザーに表示される文字
  description String?
  icon_url    String?
  value       String // システムが処理で使用する値
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // リレーション
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers  Answer[]

  @@map("question_options")
}

// 診断セッション（UserProfileと紐付け）
model QuestionnaireSession {
  id            String        @id @default(cuid())
  userProfileId String // UserProfileのidと紐付け
  categoryId    String? // 診断対象のカテゴリ
  status        SessionStatus @default(IN_PROGRESS)
  started_at    DateTime      @default(now()) @db.Timestamptz(6)
  completed_at  DateTime?     @db.Timestamptz(6)
  created_at    DateTime      @default(now()) @db.Timestamptz(6)
  updated_at    DateTime      @default(now()) @updatedAt @db.Timestamptz(6)

  // リレーション
  userProfile     UserProfile      @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  category        Category?        @relation(fields: [categoryId], references: [id])
  answers         Answer[]
  recommendations Recommendation[]
  userHistories   UserHistory[]

  @@index([userProfileId, status])
  @@index([categoryId])
  @@index([status])
  @@index([created_at])
  @@index([completed_at])
  @@map("questionnaire_sessions")
}

// 回答
model Answer {
  id                     String   @id @default(cuid())
  questionnaireSessionId String
  questionId             String
  questionOptionId       String? // 選択肢回答の場合
  range_value            Int?     @db.Integer // 範囲回答の場合 (0-100)
  text_value             String?  @db.Text // テキスト回答の場合
  created_at             DateTime @default(now()) @db.Timestamptz(6)
  updated_at             DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // リレーション
  session  QuestionnaireSession @relation(fields: [questionnaireSessionId], references: [id], onDelete: Cascade)
  question Question             @relation(fields: [questionId], references: [id])
  option   QuestionOption?      @relation(fields: [questionOptionId], references: [id])

  @@unique([questionnaireSessionId, questionId])
  @@index([questionnaireSessionId])
  @@index([questionId])
  @@index([created_at])
  @@map("answers")
}

// レコメンデーション
model Recommendation {
  id                     String   @id @default(cuid())
  questionnaireSessionId String
  productId              String
  rank                   Int      @db.Integer // ランキング順位 (1-10)
  score                  Decimal  @db.Decimal(5, 2) // スコア (0.00-100.00)
  reason                 String   @db.Text // レコメンデーション理由
  created_at             DateTime @default(now()) @db.Timestamptz(6)
  updated_at             DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // リレーション
  session QuestionnaireSession @relation(fields: [questionnaireSessionId], references: [id], onDelete: Cascade)
  product Product              @relation(fields: [productId], references: [id])

  @@unique([questionnaireSessionId, productId])
  @@unique([questionnaireSessionId, rank]) // セッション内でランクが重複しないように
  @@index([questionnaireSessionId, rank])
  @@index([productId])
  @@index([score])
  @@map("recommendations")
}

// ユーザー履歴（UserProfileと紐付け）
model UserHistory {
  id            String      @id @default(cuid())
  userProfileId String // UserProfileのidと紐付け
  type          HistoryType
  title         String
  description   String?
  status        String?
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime    @default(now()) @updatedAt @db.Timestamptz(6)

  // 構造化されたフィールド（頻繁にクエリされる要素）
  sessionId       String? // 診断セッションID
  categoryId      String? // 対象カテゴリID
  score           Decimal? @db.Decimal(5, 2) // スコア
  completion_rate Int? // 完了率（%）

  // 詳細データ（JSON形式）
  details_json Json? // 詳細データのみ

  // リレーション
  userProfile UserProfile           @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  category    Category?             @relation(fields: [categoryId], references: [id])
  session     QuestionnaireSession? @relation(fields: [sessionId], references: [id])

  @@map("user_histories")
}

// Enums
enum QuestionType {
  SINGLE_CHOICE // 単一選択
  MULTIPLE_CHOICE // 複数選択
  RANGE // 範囲
  TEXT // テキスト

  @@map("question_type")
}

enum SessionStatus {
  IN_PROGRESS // 進行中
  COMPLETED // 完了
  ABANDONED // 中断

  @@map("session_status")
}

enum HistoryType {
  QUESTIONNAIRE // 診断
  RECOMMENDATION // レコメンデーション

  @@map("history_type")
}
